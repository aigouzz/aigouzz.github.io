import{_ as n,c as a,b as l,w as p,a as o,r as e,o as t,d as r}from"./app.b5287e93.js";const c="/algorithm/assets/comp1-1.cbf542ae.png",y="/algorithm/assets/comp1-2.6178fe73.png",F="/algorithm/assets/comp1-3.59dbc96e.png",D="/algorithm/assets/comp1-4.8858ce44.png",C="/algorithm/assets/comp1-5.6bf5e551.png",A="/algorithm/assets/comp1-6.3b3b1d6b.png",i="/algorithm/assets/comp1-7.6ed32ecb.png",d="/algorithm/assets/comp1-8.ff159224.png",g="/algorithm/assets/comp1-8.ff159224.png",u="/algorithm/assets/comp1-10.a50c7675.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u7EBF\u6BB5\u6811 Segment tree \u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784","slug":"\u7EBF\u6BB5\u6811-segment-tree-\u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784","link":"#\u7EBF\u6BB5\u6811-segment-tree-\u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784","children":[]},{"level":2,"title":"\u4E00. \u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811","slug":"\u4E00-\u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811","link":"#\u4E00-\u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811","children":[]},{"level":2,"title":"\u4E8C. \u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784","slug":"\u4E8C-\u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784","link":"#\u4E8C-\u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784","children":[]},{"level":2,"title":"\u4E09. \u6784\u9020\u7EBF\u6BB5\u6811","slug":"\u4E09-\u6784\u9020\u7EBF\u6BB5\u6811","link":"#\u4E09-\u6784\u9020\u7EBF\u6BB5\u6811","children":[]},{"level":2,"title":"\u56DB. \u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2","slug":"\u56DB-\u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2","link":"#\u56DB-\u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2","children":[]},{"level":2,"title":"1. \u76F4\u63A5\u67E5\u8BE2","slug":"_1-\u76F4\u63A5\u67E5\u8BE2","link":"#_1-\u76F4\u63A5\u67E5\u8BE2","children":[]},{"level":2,"title":"2. \u61D2\u67E5\u8BE2","slug":"_2-\u61D2\u67E5\u8BE2","link":"#_2-\u61D2\u67E5\u8BE2","children":[]},{"level":2,"title":"\u4E94. \u7EBF\u6BB5\u6811\u7684\u66F4\u65B0","slug":"\u4E94-\u7EBF\u6BB5\u6811\u7684\u66F4\u65B0","link":"#\u4E94-\u7EBF\u6BB5\u6811\u7684\u66F4\u65B0","children":[]},{"level":2,"title":"1. \u5355\u70B9\u66F4\u65B0","slug":"_1-\u5355\u70B9\u66F4\u65B0","link":"#_1-\u5355\u70B9\u66F4\u65B0","children":[]},{"level":2,"title":"2. \u533A\u95F4\u66F4\u65B0","slug":"_2-\u533A\u95F4\u66F4\u65B0","link":"#_2-\u533A\u95F4\u66F4\u65B0","children":[]},{"level":2,"title":"\u516D. \u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790","slug":"\u516D-\u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790","link":"#\u516D-\u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790","children":[]},{"level":2,"title":"\u4E03. \u5E38\u89C1\u9898\u578B","slug":"\u4E03-\u5E38\u89C1\u9898\u578B","link":"#\u4E03-\u5E38\u89C1\u9898\u578B","children":[]},{"level":2,"title":"1. Range Sum Queries","slug":"_1-range-sum-queries","link":"#_1-range-sum-queries","children":[]},{"level":2,"title":"2. \u5355\u70B9\u66F4\u65B0","slug":"_2-\u5355\u70B9\u66F4\u65B0","link":"#_2-\u5355\u70B9\u66F4\u65B0","children":[]},{"level":2,"title":"3. \u533A\u95F4\u66F4\u65B0","slug":"_3-\u533A\u95F4\u66F4\u65B0","link":"#_3-\u533A\u95F4\u66F4\u65B0","children":[]},{"level":2,"title":"4. \u533A\u95F4\u5408\u5E76","slug":"_4-\u533A\u95F4\u5408\u5E76","link":"#_4-\u533A\u95F4\u5408\u5E76","children":[]},{"level":2,"title":"5. \u626B\u63CF\u7EBF","slug":"_5-\u626B\u63CF\u7EBF","link":"#_5-\u626B\u63CF\u7EBF","children":[]},{"level":2,"title":"6. \u8BA1\u6570\u95EE\u9898","slug":"_6-\u8BA1\u6570\u95EE\u9898","link":"#_6-\u8BA1\u6570\u95EE\u9898","children":[]}],"relativePath":"comp/1.md"}'),h={name:"comp/1.md"},f=o('<h2 id="\u7EBF\u6BB5\u6811-segment-tree-\u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784" tabindex="-1">\u7EBF\u6BB5\u6811 Segment tree \u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784 <a class="header-anchor" href="#\u7EBF\u6BB5\u6811-segment-tree-\u662F\u4E00\u79CD\u4E8C\u53C9\u6811\u5F62\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a></h2><p>1977\u5E74\u7531 Jon Louis Bentley \u53D1\u660E\uFF0C\u7528\u4EE5\u5B58\u50A8\u533A\u95F4\u6216\u7EBF\u6BB5\uFF0C\u5E76\u4E14\u5141\u8BB8\u5FEB\u901F\u67E5\u8BE2\u7ED3\u6784\u5185\u5305\u542B\u67D0\u4E00\u70B9\u7684\u6240\u6709\u533A\u95F4\u3002</p><p>\u4E00\u4E2A\u5305\u542B (n ) \u4E2A\u533A\u95F4\u7684\u7EBF\u6BB5\u6811\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3A ( O(n) ) \uFF0C\u67E5\u8BE2\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u5219\u4E3A (O(log n+k) ) \uFF0C\u5176\u4E2D ( k ) \u662F\u7B26\u5408\u6761\u4EF6\u7684\u533A\u95F4\u6570\u91CF\u3002\u7EBF\u6BB5\u6811\u7684\u6570\u636E\u7ED3\u6784\u4E5F\u53EF\u63A8\u5E7F\u5230\u9AD8\u7EF4\u5EA6\u3002</p><h2 id="\u4E00-\u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811" tabindex="-1">\u4E00. \u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811 <a class="header-anchor" href="#\u4E00-\u4EC0\u4E48\u662F\u7EBF\u6BB5\u6811" aria-hidden="true">#</a></h2><p>\u4EE5\u4E00\u7EF4\u7684\u7EBF\u6BB5\u6811\u4E3A\u4F8B\u3002</p><img src="'+c+`"><p>\u4EE4 S \u662F\u4E00\u7EF4\u7EBF\u6BB5\u7684\u96C6\u5408\u3002\u5C06\u8FD9\u4E9B\u7EBF\u6BB5\u7684\u7AEF\u70B9\u5750\u6807\u7531\u5C0F\u5230\u5927\u6392\u5E8F\uFF0C\u4EE4\u5176\u4E3A (x_{1},x_{2},\\cdots ,x_{m} ) \u3002\u6211\u4EEC\u5C06\u88AB\u8FD9\u4E9B\u7AEF\u70B9\u5207\u5206\u7684\u6BCF\u4E00\u4E2A\u533A\u95F4\u79F0\u4E3A\u201C\u5355\u4F4D\u533A\u95F4\u201D\uFF08\u6BCF\u4E2A\u7AEF\u70B9\u6240\u5728\u7684\u4F4D\u7F6E\u4F1A\u5355\u72EC\u6210\u4E3A\u4E00\u4E2A\u5355\u4F4D\u533A\u95F4\uFF09\uFF0C\u4ECE\u5DE6\u5230\u53F3\u5305\u542B\uFF1A</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#A6ACCD;">\\[ (</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">\\infty </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">(x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,...,</span><span style="color:#A6ACCD;">(x_</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">m-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[x_</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">x_</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">(x_</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">},+</span><span style="color:#A6ACCD;">\\infty )\\]</span></span>
<span class="line"></span></code></pre></div><p>\u7EBF\u6BB5\u6811\u7684\u7ED3\u6784\u4E3A\u4E00\u4E2A\u4E8C\u53C9\u6811\uFF0C\u6BCF\u4E2A\u8282\u70B9\u90FD\u4EE3\u8868\u4E00\u4E2A\u5750\u6807\u533A\u95F4\uFF0C\u8282\u70B9 N \u6240\u4EE3\u8868\u7684\u533A\u95F4\u8BB0\u4E3A Int(N)\uFF0C\u5219\u5176\u9700\u7B26\u5408\u4EE5\u4E0B\u6761\u4EF6\uFF1A</p><p>\u5176\u6BCF\u4E00\u4E2A\u53F6\u8282\u70B9\uFF0C\u4ECE\u5DE6\u5230\u53F3\u4EE3\u8868\u6BCF\u4E2A\u5355\u4F4D\u533A\u95F4\u3002 \u5176\u5185\u90E8\u8282\u70B9\u4EE3\u8868\u7684\u533A\u95F4\u662F\u5176\u4E24\u4E2A\u513F\u5B50\u4EE3\u8868\u7684\u533A\u95F4\u4E4B\u5E76\u96C6\u3002 \u6BCF\u4E2A\u8282\u70B9\uFF08\u5305\u542B\u53F6\u5B50\uFF09\u4E2D\u6709\u4E00\u4E2A\u5B58\u50A8\u7EBF\u6BB5\u7684\u6570\u636E\u7ED3\u6784\u3002\u82E5\u4E00\u4E2A\u7EBF\u6BB5 S \u7684\u5750\u6807\u533A\u95F4\u5305\u542B Int(N) \u4F46\u4E0D\u5305\u542B Int(parent(N))\uFF0C\u5219\u8282\u70B9 N \u4E2D\u4F1A\u5B58\u50A8\u7EBF\u6BB5 S\u3002</p><img src="`+y+'"><p>\u7EBF\u6BB5\u6811\u662F\u4E8C\u53C9\u6811\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u8282\u70B9\u4EE3\u8868\u4E00\u4E2A\u533A\u95F4\u3002\u901A\u5E38\uFF0C\u4E00\u4E2A\u8282\u70B9\u5C06\u5B58\u50A8\u4E00\u4E2A\u6216\u591A\u4E2A\u5408\u5E76\u7684\u533A\u95F4\u7684\u6570\u636E\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u6267\u884C\u67E5\u8BE2\u64CD\u4F5C\u3002</p><h2 id="\u4E8C-\u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784" tabindex="-1">\u4E8C. \u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784 <a class="header-anchor" href="#\u4E8C-\u4E3A\u4EC0\u4E48\u9700\u8981\u8FD9\u79CD\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a></h2><p>\u8BB8\u591A\u95EE\u9898\u8981\u6C42\u6211\u4EEC\u57FA\u4E8E\u5BF9\u53EF\u7528\u6570\u636E\u8303\u56F4\u6216\u533A\u95F4\u7684\u67E5\u8BE2\u6765\u7ED9\u51FA\u7ED3\u679C\u3002\u8FD9\u53EF\u80FD\u662F\u4E00\u4E2A\u7E41\u7410\u800C\u7F13\u6162\u7684\u8FC7\u7A0B\uFF0C\u5C24\u5176\u662F\u5728\u67E5\u8BE2\u6570\u91CF\u4F17\u591A\u4E14\u91CD\u590D\u7684\u60C5\u51B5\u4E0B\u3002\u7EBF\u6BB5\u6811\u8BA9\u6211\u4EEC\u4EE5\u5BF9\u6570\u65F6\u95F4\u590D\u6742\u5EA6\u6709\u6548\u5730\u5904\u7406\u6B64\u7C7B\u67E5\u8BE2\u3002</p><p>\u7EBF\u6BB5\u6811\u53EF\u7528\u4E8E\u8BA1\u7B97\u51E0\u4F55\u548C \u5730\u7406\u4FE1\u606F\u7CFB\u7EDF\u9886\u57DF\u3002\u4F8B\u5982\uFF0C\u8DDD\u4E2D\u5FC3\u53C2\u8003\u70B9/\u539F\u70B9\u4E00\u5B9A\u8DDD\u79BB\u7684\u7A7A\u95F4\u4E2D\u53EF\u80FD\u4F1A\u6709\u5927\u91CF\u70B9\u3002\u5047\u8BBE\u6211\u4EEC\u8981\u67E5\u627E\u8DDD\u539F\u70B9\u4E00\u5B9A\u8DDD\u79BB\u8303\u56F4\u5185\u7684\u70B9\u3002\u4E00\u4E2A\u666E\u901A\u7684\u67E5\u627E\u8868\u5C06\u9700\u8981\u5BF9\u6240\u6709\u53EF\u80FD\u7684\u70B9\u6216\u6240\u6709\u53EF\u80FD\u7684\u8DDD\u79BB\u8FDB\u884C\u7EBF\u6027\u626B\u63CF\uFF08\u5047\u8BBE\u662F\u6563\u5217\u56FE\uFF09\u3002\u7EBF\u6BB5\u6811\u4F7F\u6211\u4EEC\u80FD\u591F\u4EE5\u5BF9\u6570\u65F6\u95F4\u5B9E\u73B0\u8FD9\u4E00\u9700\u6C42\uFF0C\u800C\u6240\u9700\u7A7A\u95F4\u5374\u5C11\u5F97\u591A\u3002\u8FD9\u6837\u7684\u95EE\u9898\u79F0\u4E3A \u5E73\u9762\u8303\u56F4\u641C\u7D22\u3002\u6709\u6548\u5730\u89E3\u51B3\u6B64\u7C7B\u95EE\u9898\u81F3\u5173\u91CD\u8981\uFF0C\u5C24\u5176\u662F\u5728\u5904\u7406\u52A8\u6001\u6570\u636E\u4E14\u77AC\u606F\u4E07\u53D8\u7684\u60C5\u51B5\u4E0B\uFF08\u4F8B\u5982\uFF0C\u7528\u4E8E\u7A7A\u4E2D\u4EA4\u901A\u7684\u96F7\u8FBE\u7CFB\u7EDF\uFF09\u3002\u4E0B\u6587\u4F1A\u4EE5\u7EBF\u6BB5\u6811\u89E3\u51B3 Range Sum Query problem \u4E3A\u4F8B\u3002</p><img src="'+F+'"><p>\u4E0A\u56FE\u5373\u4F5C\u4E3A\u8303\u56F4\u67E5\u8BE2\u7684\u7EBF\u6BB5\u6811\u3002</p><h2 id="\u4E09-\u6784\u9020\u7EBF\u6BB5\u6811" tabindex="-1">\u4E09. \u6784\u9020\u7EBF\u6BB5\u6811 <a class="header-anchor" href="#\u4E09-\u6784\u9020\u7EBF\u6BB5\u6811" aria-hidden="true">#</a></h2><p>\u5047\u8BBE\u6570\u636E\u5B58\u5728 size \u4E3A n \u7684 arr[] \u4E2D\u3002</p><p>\u7EBF\u6BB5\u6811\u7684\u6839\u901A\u5E38\u4EE3\u8868\u6574\u4E2A\u6570\u636E\u533A\u95F4\u3002\u8FD9\u91CC\u662F arr[0\uFF1An-1]\u3002 \u6811\u7684\u6BCF\u4E2A\u53F6\u5B50\u4EE3\u8868\u4E00\u4E2A\u8303\u56F4\uFF0C\u5176\u4E2D\u4EC5\u5305\u542B\u4E00\u4E2A\u5143\u7D20\u3002 \u56E0\u6B64\uFF0C\u53F6\u5B50\u4EE3\u8868 arr[0]\uFF0Carr[1] \u7B49\u7B49\uFF0C\u76F4\u5230 arr[n-1]\u3002 \u6811\u7684\u5185\u90E8\u8282\u70B9\u5C06\u4EE3\u8868\u5176\u5B50\u8282\u70B9\u7684\u5408\u5E76\u6216\u5E76\u96C6\u7ED3\u679C\u3002 \u6BCF\u4E2A\u5B50\u8282\u70B9\u53EF\u4EE3\u8868\u5176\u7236\u8282\u70B9\u6240\u4EE3\u8868\u8303\u56F4\u7684\u5927\u7EA6\u4E00\u534A\u3002(\u4E8C\u5206\u7684\u601D\u60F3) \u4F7F\u7528\u5927\u5C0F\u4E3A (\\approx 4 \\ast n ) \u7684\u6570\u7EC4\u53EF\u4EE5\u8F7B\u677E\u8868\u793A n \u4E2A\u5143\u7D20\u8303\u56F4\u7684\u7EBF\u6BB5\u6811\u3002\uFF08 Stack Overflow \u5BF9\u539F\u56E0\u8FDB\u884C\u4E86\u5F88\u597D\u7684\u8BA8\u8BBA\u3002\u5982\u679C\u4F60\u8FD8\u4E0D\u786E\u5B9A\uFF0C\u8BF7\u4E0D\u8981\u62C5\u5FC3\u3002\u672C\u6587\u5C06\u5728\u7A0D\u540E\u8FDB\u884C\u8BA8\u8BBA\u3002\uFF09</p><p>\u4E0B\u6807\u4E3A i \u7684\u8282\u70B9\u6709\u4E24\u4E2A\u8282\u70B9\uFF0C\u4E0B\u6807\u5206\u522B\u4E3A ((2 \\ast i + 1) ) \u548C ((2 \\ast i + 2)) \u3002</p><img src="'+D+'"><p>\u7EBF\u6BB5\u6811\u770B\u4E0A\u53BB\u5F88\u76F4\u89C2\u5E76\u4E14\u975E\u5E38\u9002\u5408\u9012\u5F52\u6784\u9020\u3002</p><p>\u6211\u4EEC\u5C06\u4F7F\u7528\u6570\u7EC4 tree[] \u6765\u5B58\u50A8\u7EBF\u6BB5\u6811\u7684\u8282\u70B9\uFF08\u521D\u59CB\u5316\u4E3A\u5168\u96F6\uFF09\u3002 \u4E0B\u6807\u4ECE 0 \u5F00\u59CB\u3002</p><p>\u6811\u7684\u8282\u70B9\u5728\u4E0B\u6807 0 \u5904\u3002\u56E0\u6B64 tree[0] \u662F\u6811\u7684\u6839\u3002</p><p>tree[i] \u7684\u5B69\u5B50\u5B58\u5728 tree[2 * i + 1] \u548C tree[2 * i + 2] \u4E2D\u3002</p><p>\u7528\u989D\u5916\u7684 0 \u6216 null \u503C\u586B\u5145 arr[]\uFF0C\u4F7F\u5F97 (n = 2^{k} ) \uFF08\u5176\u4E2D n \u662F arr[] \u7684\u603B\u957F\u5EA6\uFF0C\u800C k \u662F\u975E\u8D1F\u6574\u6570\u3002\uFF09 \u53F6\u5B50\u8282\u70B9\u7684\u4E0B\u6807\u53D6\u503C\u8303\u56F4\u5728 ( \\in [2^{k}-1, 2^{k+1}-2])</p><img src="'+C+`"><p>\u6784\u9020\u7EBF\u6BB5\u6811\u7684\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// SegmentTree define</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SegmentTree</span><span style="color:#A6ACCD;"> struct {</span></span>
<span class="line"><span style="color:#A6ACCD;">	data, tree, lazy []int</span></span>
<span class="line"><span style="color:#A6ACCD;">	left, right      int</span></span>
<span class="line"><span style="color:#A6ACCD;">	merge            func(i, j int) int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Init define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">Init</span><span style="color:#A6ACCD;">(nums []int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oper </span><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">(i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j int) int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">merge</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oper</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">lazy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make</span><span style="color:#F07178;">([]</span><span style="color:#A6ACCD;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make</span><span style="color:#F07178;">([]</span><span style="color:#A6ACCD;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make</span><span style="color:#F07178;">([]</span><span style="color:#A6ACCD;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lazy</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u5728 treeIndex \u7684\u4F4D\u7F6E\u521B\u5EFA [left....right] \u533A\u95F4\u7684\u7EBF\u6BB5\u6811</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">leftChild</span><span style="color:#A6ACCD;">(index int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">rightChild</span><span style="color:#A6ACCD;">(index int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u7B14\u8005\u5C06\u7EBF\u6BB5\u6811\u5408\u5E76\u7684\u64CD\u4F5C\u53D8\u6210\u4E86\u4E00\u4E2A\u51FD\u6570\u3002\u5408\u5E76\u64CD\u4F5C\u6839\u636E\u9898\u610F\u53D8\u5316\uFF0C\u5E38\u89C1\u7684\u6709\u52A0\u6CD5\uFF0C\u53D6 max\uFF0Cmin \u7B49\u7B49\u3002</p><p>\u6211\u4EEC\u4EE5 arr[] = [18, 17, 13, 19, 15, 11, 20, 12, 33, 25 ] \u4E3A\u4F8B\u6784\u9020\u7EBF\u6BB5\u6811\uFF1A</p><img src="`+A+`"><p>\u7EBF\u6BB5\u6811\u6784\u9020\u597D\u4EE5\u540E\uFF0C\u6570\u7EC4\u91CC\u9762\u7684\u6570\u636E\u662F\uFF1A</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#A6ACCD;">tree[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [ </span><span style="color:#F78C6C;">183</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">82</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">101</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">48</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">43</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">58</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">35</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> ]</span></span>
<span class="line"></span></code></pre></div><p>\u7EBF\u6BB5\u6811\u7528 0 \u586B\u5145\u5230 4*n \u4E2A\u5143\u7D20\u3002</p><p>LeetCode \u5BF9\u5E94\u9898\u76EE\u662F 218. The Skyline Problem\u3001 303. Range Sum Query - Immutable\u3001 307. Range Sum Query - Mutable\u3001 699. Falling Squares</p><h2 id="\u56DB-\u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2" tabindex="-1">\u56DB. \u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2 <a class="header-anchor" href="#\u56DB-\u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2" aria-hidden="true">#</a></h2><p>\u7EBF\u6BB5\u6811\u7684\u67E5\u8BE2\u65B9\u6CD5\u6709\u4E24\u79CD\uFF0C\u4E00\u79CD\u662F\u76F4\u63A5\u67E5\u8BE2\uFF0C\u53E6\u5916\u4E00\u79CD\u662F\u61D2\u67E5\u8BE2\u3002</p><h2 id="_1-\u76F4\u63A5\u67E5\u8BE2" tabindex="-1">1. \u76F4\u63A5\u67E5\u8BE2 <a class="header-anchor" href="#_1-\u76F4\u63A5\u67E5\u8BE2" aria-hidden="true">#</a></h2><p>\u5F53\u67E5\u8BE2\u8303\u56F4\u4E0E\u5F53\u524D\u8282\u70B9\u8868\u793A\u7684\u8303\u56F4\u5B8C\u5168\u5339\u914D\u65F6\uFF0C\u8BE5\u65B9\u6CD5\u8FD4\u56DE\u7ED3\u679C\u3002\u5426\u5219\uFF0C\u5B83\u4F1A\u66F4\u6DF1\u5165\u5730\u904D\u5386\u7EBF\u6BB5\u6811\u6811\uFF0C\u4EE5\u627E\u5230\u4E0E\u8282\u70B9\u7684\u4E00\u90E8\u5206\u5B8C\u5168\u5339\u914D\u7684\u8282\u70B9\u3002</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">// \u67E5\u8BE2 [left....right] \u533A\u95F4\u5185\u7684\u503C</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// Query define</span></span>
<span class="line"><span style="color:#A6ACCD;">func (st *SegmentTree) Query(left, right int) int {</span></span>
<span class="line"><span style="color:#A6ACCD;">	if len(st.data) &gt; 0 {</span></span>
<span class="line"><span style="color:#A6ACCD;">		return st.queryInTree(0, 0, len(st.data)-1, left, right)</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	return 0</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// \u5728\u4EE5 treeIndex \u4E3A\u6839\u7684\u7EBF\u6BB5\u6811\u4E2D [left...right] \u7684\u8303\u56F4\u91CC\uFF0C\u641C\u7D22\u533A\u95F4 [queryLeft...queryRight] \u7684\u503C</span></span>
<span class="line"><span style="color:#A6ACCD;">func (st *SegmentTree) queryInTree(treeIndex, left, right, queryLeft, queryRight int) int {</span></span>
<span class="line"><span style="color:#A6ACCD;">	if left == queryLeft &amp;&amp; right == queryRight {</span></span>
<span class="line"><span style="color:#A6ACCD;">		return st.tree[treeIndex]</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	midTreeIndex, leftTreeIndex, rightTreeIndex := left+(right-left)&gt;&gt;1, st.leftChild(treeIndex), st.rightChild(treeIndex)</span></span>
<span class="line"><span style="color:#A6ACCD;">	if queryLeft &gt; midTreeIndex {</span></span>
<span class="line"><span style="color:#A6ACCD;">		return st.queryInTree(rightTreeIndex, midTreeIndex+1, right, queryLeft, queryRight)</span></span>
<span class="line"><span style="color:#A6ACCD;">	} else if queryRight &lt;= midTreeIndex {</span></span>
<span class="line"><span style="color:#A6ACCD;">		return st.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft, queryRight)</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	return st.merge(st.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft, midTreeIndex),</span></span>
<span class="line"><span style="color:#A6ACCD;">		st.queryInTree(rightTreeIndex, midTreeIndex+1, right, midTreeIndex+1, queryRight))</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><img src="`+i+`"><p>\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C\u67E5\u8BE2\u7684\u533A\u95F4\u8303\u56F4\u4E3A[2\uFF0C8] \u7684\u5143\u7D20\u4E4B\u548C\u3002\u6CA1\u6709\u4EFB\u4F55\u7EBF\u6BB5\u53EF\u4EE5\u5B8C\u5168\u4EE3\u8868[2\uFF0C8] \u8303\u56F4\u3002\u4F46\u662F\u53EF\u4EE5\u89C2\u5BDF\u5230\uFF0C\u53EF\u4EE5\u4F7F\u7528\u8303\u56F4 [2\uFF0C2]\uFF0C[3\uFF0C4]\uFF0C[5\uFF0C7]\uFF0C[8\uFF0C8] \u8FD9 4 \u4E2A\u533A\u95F4\u6784\u6210 [8\uFF0C8]\u3002\u5FEB\u901F\u9A8C\u8BC1 [2,8] \u5904\u7684\u8F93\u5165\u5143\u7D20\u4E4B\u548C\u4E3A 13 + 19 + 15 + 11 + 20 + 12 + 33 = 123\u3002[2\uFF0C2]\uFF0C[3\uFF0C4]\uFF0C[5\uFF0C7] \u548C [8\uFF0C8] \u7684\u8282\u70B9\u603B\u548C\u662F 13 + 34 + 43 + 33 = 123\u3002\u7B54\u6848\u6B63\u786E\u3002</p><h2 id="_2-\u61D2\u67E5\u8BE2" tabindex="-1">2. \u61D2\u67E5\u8BE2 <a class="header-anchor" href="#_2-\u61D2\u67E5\u8BE2" aria-hidden="true">#</a></h2><p>\u61D2\u67E5\u8BE2\u5BF9\u5E94\u61D2\u66F4\u65B0\uFF0C\u4E24\u8005\u662F\u914D\u5957\u64CD\u4F5C\u3002\u5728\u533A\u95F4\u66F4\u65B0\u65F6\uFF0C\u5E76\u4E0D\u76F4\u63A5\u66F4\u65B0\u533A\u95F4\u5185\u6240\u6709\u8282\u70B9\uFF0C\u800C\u662F\u628A\u533A\u95F4\u5185\u8282\u70B9\u589E\u51CF\u53D8\u5316\u7684\u503C\u5B58\u5728 lazy \u6570\u7EC4\u4E2D\u3002\u7B49\u5230\u4E0B\u6B21\u67E5\u8BE2\u7684\u65F6\u5019\u518D\u628A\u589E\u51CF\u5E94\u7528\u5230\u5177\u4F53\u7684\u8282\u70B9\u4E0A\u3002\u8FD9\u6837\u505A\u4E5F\u662F\u4E3A\u4E86\u5206\u644A\u65F6\u95F4\u590D\u6742\u5EA6\uFF0C\u4FDD\u8BC1\u67E5\u8BE2\u548C\u66F4\u65B0\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u5728 O(log n) \u7EA7\u522B\uFF0C\u4E0D\u4F1A\u9000\u5316\u6210 O(n) \u7EA7\u522B\u3002</p><p>\u61D2\u67E5\u8BE2\u8282\u70B9\u7684\u6B65\u9AA4\uFF1A</p><ul><li>\u5148\u5224\u65AD\u5F53\u524D\u8282\u70B9\u662F\u5426\u662F\u61D2\u8282\u70B9\u3002\u901A\u8FC7\u67E5\u8BE2 lazy[i] \u662F\u5426\u4E3A 0 \u5224\u65AD\u3002\u5982\u679C\u662F\u61D2\u8282\u70B9\uFF0C\u5C06\u5B83\u7684\u589E\u51CF\u53D8\u5316\u5E94\u7528\u5230\u8BE5\u8282\u70B9\u4E0A\u3002\u5E76\u4E14\u66F4\u65B0\u5B83\u7684\u5B69\u5B50\u8282\u70B9\u3002\u8FD9\u4E00\u6B65\u548C\u66F4\u65B0\u64CD\u4F5C\u7684\u7B2C\u4E00\u6B65\u5B8C\u5168\u4E00\u6837\u3002</li><li>\u9012\u5F52\u67E5\u8BE2\u5B50\u8282\u70B9\uFF0C\u4EE5\u627E\u5230\u9002\u5408\u7684\u67E5\u8BE2\u8282\u70B9\u3002</li></ul><p>\u5177\u4F53\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// \u67E5\u8BE2 [left....right] \u533A\u95F4\u5185\u7684\u503C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// QueryLazy define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">QueryLazy</span><span style="color:#A6ACCD;">(left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> queryRight int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// segment completely outside range</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// represents a null node</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// this node is lazy</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.tree[treeIndex] += (right - left + 1) * st.lazy[treeIndex] // normalize current node by removing lazinesss</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// update lazy[] for children nodes</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[leftTreeIndex] += st.lazy[treeIndex]</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[rightTreeIndex] += st.lazy[treeIndex]</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// current node processed. No longer lazy</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// segment completely inside range</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">// merge query results</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="\u4E94-\u7EBF\u6BB5\u6811\u7684\u66F4\u65B0" tabindex="-1">\u4E94. \u7EBF\u6BB5\u6811\u7684\u66F4\u65B0 <a class="header-anchor" href="#\u4E94-\u7EBF\u6BB5\u6811\u7684\u66F4\u65B0" aria-hidden="true">#</a></h2><h2 id="_1-\u5355\u70B9\u66F4\u65B0" tabindex="-1">1. \u5355\u70B9\u66F4\u65B0 <a class="header-anchor" href="#_1-\u5355\u70B9\u66F4\u65B0" aria-hidden="true">#</a></h2><p>\u5355\u70B9\u66F4\u65B0\u7C7B\u4F3C\u4E8E buildSegTree\u3002\u66F4\u65B0\u6811\u7684\u53F6\u5B50\u8282\u70B9\u7684\u503C\uFF0C\u8BE5\u503C\u4E0E\u66F4\u65B0\u540E\u7684\u5143\u7D20\u76F8\u5BF9\u5E94\u3002\u8FD9\u4E9B\u66F4\u65B0\u7684\u503C\u4F1A\u901A\u8FC7\u6811\u7684\u4E0A\u5C42\u8282\u70B9\u628A\u5F71\u54CD\u4F20\u64AD\u5230\u6839\u3002</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// \u66F4\u65B0 index \u4F4D\u7F6E\u7684\u503C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Update define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">Update</span><span style="color:#A6ACCD;">(index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateInTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u4EE5 treeIndex \u4E3A\u6839\uFF0C\u66F4\u65B0 index \u4F4D\u7F6E\u4E0A\u7684\u503C\u4E3A val</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">updateInTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><img src="`+d+'"><p>\u5728\u6B64\u793A\u4F8B\u4E2D\uFF0C\u4E0B\u6807\u4E3A\uFF08\u5728\u539F\u59CB\u8F93\u5165\u6570\u636E\u4E2D\uFF091\u30013 \u548C 6 \u5904\u7684\u5143\u7D20\u5206\u522B\u589E\u52A0\u4E86 +3\uFF0C-1 \u548C +2\u3002\u53EF\u4EE5\u770B\u5230\u66F4\u6539\u5982\u4F55\u6CBF\u6811\u4F20\u64AD\uFF0C\u4E00\u76F4\u5230\u6839\u3002</p><h2 id="_2-\u533A\u95F4\u66F4\u65B0" tabindex="-1">2. \u533A\u95F4\u66F4\u65B0 <a class="header-anchor" href="#_2-\u533A\u95F4\u66F4\u65B0" aria-hidden="true">#</a></h2><p>\u7EBF\u6BB5\u6811\u4EC5\u66F4\u65B0\u5355\u4E2A\u5143\u7D20\uFF0C\u975E\u5E38\u6709\u6548\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6 O(log n)\u3002 \u4F46\u662F\uFF0C\u5982\u679C\u6211\u4EEC\u8981\u66F4\u65B0\u4E00\u7CFB\u5217\u5143\u7D20\u600E\u4E48\u529E\uFF1F\u6309\u7167\u5F53\u524D\u7684\u65B9\u6CD5\uFF0C\u6BCF\u4E2A\u5143\u7D20\u90FD\u5FC5\u987B\u72EC\u7ACB\u66F4\u65B0\uFF0C\u6BCF\u4E2A\u5143\u7D20\u90FD\u4F1A\u82B1\u8D39\u4E00\u4E9B\u65F6\u95F4\u3002\u5206\u522B\u66F4\u65B0\u6BCF\u4E00\u4E2A\u53F6\u5B50\u8282\u70B9\u610F\u5473\u7740\u8981\u591A\u6B21\u5904\u7406\u5B83\u4EEC\u7684\u5171\u540C\u7956\u5148\u3002\u7956\u5148\u8282\u70B9\u53EF\u80FD\u88AB\u66F4\u65B0\u591A\u6B21\u3002\u5982\u679C\u60F3\u8981\u51CF\u5C11\u8FD9\u79CD\u91CD\u590D\u8BA1\u7B97\uFF0C\u8BE5\u600E\u4E48\u529E\uFF1F</p><img src="'+g+`"><p>\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C\u6839\u8282\u70B9\u88AB\u66F4\u65B0\u4E86\u4E09\u6B21\uFF0C\u800C\u7F16\u53F7\u4E3A 82 \u7684\u8282\u70B9\u88AB\u66F4\u65B0\u4E86\u4E24\u6B21\u3002\u8FD9\u662F\u56E0\u4E3A\u66F4\u65B0\u53F6\u5B50\u8282\u70B9\u5BF9\u4E0A\u5C42\u7236\u4EB2\u8282\u70B9\u6709\u5F71\u54CD\u3002\u6700\u5DEE\u7684\u60C5\u51B5\uFF0C\u67E5\u8BE2\u7684\u533A\u95F4\u5185\u4E0D\u5305\u542B\u9891\u7E41\u66F4\u65B0\u7684\u5143\u7D20\uFF0C\u4E8E\u662F\u9700\u8981\u82B1\u8D39\u5F88\u591A\u65F6\u95F4\u66F4\u65B0\u4E0D\u600E\u4E48\u8BBF\u95EE\u7684\u8282\u70B9\u3002\u589E\u52A0\u989D\u5916\u7684 lazy \u6570\u7EC4\uFF0C\u53EF\u4EE5\u51CF\u5C11\u4E0D\u5FC5\u8981\u7684\u8BA1\u7B97\uFF0C\u5E76\u4E14\u80FD\u6309\u9700\u5904\u7406\u8282\u70B9\u3002</p><p>\u4F7F\u7528\u53E6\u4E00\u4E2A\u6570\u7EC4 lazy[]\uFF0C\u5B83\u7684\u5927\u5C0F\u4E0E\u6211\u4EEC\u7684\u7EBF\u6BB5\u6811 array tree[] \u5B8C\u5168\u76F8\u540C\uFF0C\u4EE3\u8868\u4E00\u4E2A\u60F0\u6027\u8282\u70B9\u3002\u5F53\u8BBF\u95EE\u6216\u67E5\u8BE2\u8BE5\u8282\u70B9\u65F6\uFF0Clazy[i] \u4E2D\u4FDD\u7559\u9700\u8981\u589E\u52A0\u6216\u8005\u51CF\u5C11\u8BE5\u8282\u70B9 tree[i] \u7684\u6570\u91CF\u3002 \u5F53 lazy[i] \u4E3A 0 \u65F6\uFF0C\u8868\u793A tree[i] \u8BE5\u8282\u70B9\u4E0D\u662F\u60F0\u6027\u7684\uFF0C\u5E76\u4E14\u6CA1\u6709\u7F13\u5B58\u7684\u66F4\u65B0\u3002</p><p>\u66F4\u65B0\u533A\u95F4\u5185\u8282\u70B9\u7684\u6B65\u9AA4\uFF1A</p><ul><li>\u5148\u5224\u65AD\u5F53\u524D\u8282\u70B9\u662F\u5426\u662F\u61D2\u8282\u70B9\u3002\u901A\u8FC7\u67E5\u8BE2 lazy[i] \u662F\u5426\u4E3A 0 \u5224\u65AD\u3002\u5982\u679C\u662F\u61D2\u8282\u70B9\uFF0C\u5C06\u5B83\u7684\u589E\u51CF\u53D8\u5316\u5E94\u7528\u5230\u8BE5\u8282\u70B9\u4E0A\u3002\u5E76\u4E14\u66F4\u65B0\u5B83\u7684\u5B69\u5B50\u8282\u70B9\u3002</li><li>\u5982\u679C\u5F53\u524D\u8282\u70B9\u4EE3\u8868\u7684\u533A\u95F4\u4F4D\u4E8E\u66F4\u65B0\u8303\u56F4\u5185\uFF0C\u5219\u5C06\u5F53\u524D\u66F4\u65B0\u64CD\u4F5C\u5E94\u7528\u4E8E\u5F53\u524D\u8282\u70B9\u3002</li><li>\u9012\u5F52\u66F4\u65B0\u5B50\u8282\u70B9\u3002</li></ul><p>\u5177\u4F53\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// \u66F4\u65B0 [updateLeft....updateRight] \u4F4D\u7F6E\u7684\u503C</span></span>
<span class="line"><span style="color:#676E95;">// \u6CE8\u610F\u8FD9\u91CC\u7684\u66F4\u65B0\u503C\u662F\u5728\u539F\u6765\u503C\u7684\u57FA\u7840\u4E0A\u589E\u52A0\u6216\u8005\u51CF\u5C11\uFF0C\u800C\u4E0D\u662F\u628A\u8FD9\u4E2A\u533A\u95F4\u5185\u7684\u503C\u90FD\u8D4B\u503C\u4E3A x\uFF0C\u533A\u95F4\u66F4\u65B0\u548C\u5355\u70B9\u66F4\u65B0\u4E0D\u540C</span></span>
<span class="line"><span style="color:#676E95;">// \u8FD9\u91CC\u7684\u533A\u95F4\u66F4\u65B0\u5173\u6CE8\u7684\u662F\u53D8\u5316\uFF0C\u5355\u70B9\u66F4\u65B0\u5173\u6CE8\u7684\u662F\u5B9A\u503C</span></span>
<span class="line"><span style="color:#676E95;">// \u5F53\u7136\u533A\u95F4\u66F4\u65B0\u4E5F\u53EF\u4EE5\u90FD\u66F4\u65B0\u6210\u5B9A\u503C\uFF0C\u5982\u679C\u53EA\u533A\u95F4\u66F4\u65B0\u6210\u5B9A\u503C\uFF0C\u90A3\u4E48 lazy \u66F4\u65B0\u7B56\u7565\u9700\u8981\u53D8\u5316\uFF0Cmerge \u7B56\u7565\u4E5F\u9700\u8981\u53D8\u5316\uFF0C\u8FD9\u91CC\u6682\u4E0D\u8BE6\u7EC6\u8BA8\u8BBA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// UpdateLazy define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">UpdateLazy</span><span style="color:#A6ACCD;">(updateLeft</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateRight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateRight</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentTree) </span><span style="color:#82AAFF;">updateLazyInTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateLeft</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateRight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// this node is lazy</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">//st.tree[treeIndex] += (right - left + 1) * st.lazy[treeIndex] // normalize current node by removing laziness</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// update lazy[] for children nodes</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[leftTreeIndex] += st.lazy[treeIndex]</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[rightTreeIndex] += st.lazy[treeIndex]</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// current node processed. No longer lazy</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// out of range. escape.</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// segment is fully within update range</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">//st.tree[treeIndex] += (right - left + 1) * val // update segment</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// update lazy[] for children</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[leftTreeIndex] += val</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// st.lazy[rightTreeIndex] += val</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateRight</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateLazyInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateRight</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">// merge updates</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>LeetCode \u5BF9\u5E94\u9898\u76EE\u662F 218. The Skyline Problem\u3001 699. Falling Squares</p><h2 id="\u516D-\u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790" tabindex="-1">\u516D. \u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790 <a class="header-anchor" href="#\u516D-\u65F6\u95F4\u590D\u6742\u5EA6\u5206\u6790" aria-hidden="true">#</a></h2><p>\u8BA9\u6211\u4EEC\u770B\u4E00\u4E0B\u6784\u5EFA\u8FC7\u7A0B\u3002\u6211\u4EEC\u8BBF\u95EE\u4E86\u7EBF\u6BB5\u6811\u7684\u6BCF\u4E2A\u53F6\u5B50\uFF08\u5BF9\u5E94\u4E8E\u6570\u7EC4 arr[] \u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\uFF09\u3002\u56E0\u6B64\uFF0C\u6211\u4EEC\u5904\u7406\u5927\u7EA6 2 * n \u4E2A\u8282\u70B9\u3002\u8FD9\u4F7F\u6784\u5EFA\u8FC7\u7A0B\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(n)\u3002\u5BF9\u4E8E\u6BCF\u4E2A\u9012\u5F52\u66F4\u65B0\u7684\u8FC7\u7A0B\u90FD\u5C06\u4E22\u5F03\u533A\u95F4\u8303\u56F4\u7684\u4E00\u534A\uFF0C\u4EE5\u5230\u8FBE\u6811\u4E2D\u7684\u53F6\u5B50\u8282\u70B9\u3002\u8FD9\u7C7B\u4F3C\u4E8E\u4E8C\u5206\u641C\u7D22\uFF0C\u53EA\u9700\u8981\u5BF9\u6570\u65F6\u95F4\u3002\u66F4\u65B0\u53F6\u5B50\u540E\uFF0C\u5C06\u66F4\u65B0\u6811\u7684\u6BCF\u4E2A\u7EA7\u522B\u4E0A\u7684\u76F4\u63A5\u7956\u5148\u3002\u8FD9\u82B1\u8D39\u65F6\u95F4\u4E0E\u6811\u7684\u9AD8\u5EA6\u6210\u7EBF\u6027\u5173\u7CFB\u3002</p><img src="`+u+`"><p>4<em>n \u4E2A\u8282\u70B9\u53EF\u4EE5\u786E\u4FDD\u5C06\u7EBF\u6BB5\u6811\u6784\u5EFA\u4E3A\u5B8C\u6574\u7684\u4E8C\u53C9\u6811\uFF0C\u4ECE\u800C\u6811\u7684\u9AD8\u5EA6\u4E3A log(4</em>n + 1) \u5411\u4E0A\u53D6\u6574\u3002\u7EBF\u6BB5\u6811\u8BFB\u53D6\u548C\u66F4\u65B0\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u4E3A O(log n)\u3002</p><h2 id="\u4E03-\u5E38\u89C1\u9898\u578B" tabindex="-1">\u4E03. \u5E38\u89C1\u9898\u578B <a class="header-anchor" href="#\u4E03-\u5E38\u89C1\u9898\u578B" aria-hidden="true">#</a></h2><h2 id="_1-range-sum-queries" tabindex="-1">1. Range Sum Queries <a class="header-anchor" href="#_1-range-sum-queries" aria-hidden="true">#</a></h2><p>Range Sum Queries \u662F Range Queries \u95EE\u9898\u7684\u5B50\u96C6\u3002\u7ED9\u5B9A\u4E00\u4E2A\u6570\u636E\u5143\u7D20\u6570\u7EC4\u6216\u5E8F\u5217\uFF0C\u9700\u8981\u5904\u7406\u7531\u5143\u7D20\u8303\u56F4\u7EC4\u6210\u7684\u8BFB\u53D6\u548C\u66F4\u65B0\u67E5\u8BE2\u3002\u7EBF\u6BB5\u6811 Segment Tree \u548C\u6811\u72B6\u6570\u7EC4 Binary Indexed Tree (a.k.a. Fenwick Tree)) \u90FD\u80FD\u5F88\u5FEB\u7684\u89E3\u51B3\u8FD9\u7C7B\u95EE\u9898\u3002</p><p>Range Sum Query \u95EE\u9898\u4E13\u95E8\u5904\u7406\u67E5\u8BE2\u8303\u56F4\u5185\u7684\u5143\u7D20\u603B\u548C\u3002\u8FD9\u4E2A\u95EE\u9898\u5B58\u5728\u8BB8\u591A\u53D8\u4F53\uFF0C\u5305\u62EC \u4E0D\u53EF\u53D8\u6570\u636E\uFF0C \u53EF\u53D8\u6570\u636E\uFF0C \u591A\u6B21\u66F4\u65B0\uFF0C\u5355\u6B21\u67E5\u8BE2 \u548C \u591A\u6B21\u66F4\u65B0\uFF0C\u591A\u6B21\u67E5\u8BE2\u3002</p><h2 id="_2-\u5355\u70B9\u66F4\u65B0" tabindex="-1">2. \u5355\u70B9\u66F4\u65B0 <a class="header-anchor" href="#_2-\u5355\u70B9\u66F4\u65B0" aria-hidden="true">#</a></h2><p>HDU 1166 \u654C\u5175\u5E03\u9635 update:\u5355\u70B9\u589E\u51CF query:\u533A\u95F4\u6C42\u548C HDU 1754 I Hate It update:\u5355\u70B9\u66FF\u6362 query:\u533A\u95F4\u6700\u503C HDU 1394 Minimum Inversion Number update:\u5355\u70B9\u589E\u51CF query:\u533A\u95F4\u6C42\u548C HDU 2795 Billboard query:\u533A\u95F4\u6C42\u6700\u5927\u503C\u7684\u4F4D\u5B50(\u76F4\u63A5\u628Aupdate\u7684\u64CD\u4F5C\u5728query\u91CC\u505A\u4E86)</p><h2 id="_3-\u533A\u95F4\u66F4\u65B0" tabindex="-1">3. \u533A\u95F4\u66F4\u65B0 <a class="header-anchor" href="#_3-\u533A\u95F4\u66F4\u65B0" aria-hidden="true">#</a></h2><p>HDU 1698 Just a Hook update:\u6210\u6BB5\u66FF\u6362 (\u7531\u4E8E\u53EAquery\u4E00\u6B21\u603B\u533A\u95F4,\u6240\u4EE5\u53EF\u4EE5\u76F4\u63A5\u8F93\u51FA 1 \u7ED3\u70B9\u7684\u4FE1\u606F) POJ 3468 A Simple Problem with Integers update:\u6210\u6BB5\u589E\u51CF query:\u533A\u95F4\u6C42\u548C POJ 2528 Mayor\u2019s posters \u79BB\u6563\u5316 + update:\u6210\u6BB5\u66FF\u6362 query:\u7B80\u5355hash POJ 3225 Help with Intervals update:\u6210\u6BB5\u66FF\u6362,\u533A\u95F4\u5F02\u6216 query:\u7B80\u5355hash</p><h2 id="_4-\u533A\u95F4\u5408\u5E76" tabindex="-1">4. \u533A\u95F4\u5408\u5E76 <a class="header-anchor" href="#_4-\u533A\u95F4\u5408\u5E76" aria-hidden="true">#</a></h2><p>\u8FD9\u7C7B\u9898\u76EE\u4F1A\u8BE2\u95EE\u533A\u95F4\u4E2D\u6EE1\u8DB3\u6761\u4EF6\u7684\u8FDE\u7EED\u6700\u957F\u533A\u95F4,\u6240\u4EE5PushUp\u7684\u65F6\u5019\u9700\u8981\u5BF9\u5DE6\u53F3\u513F\u5B50\u7684\u533A\u95F4\u8FDB\u884C\u5408\u5E76</p><p>POJ 3667 Hotel update:\u533A\u95F4\u66FF\u6362 query:\u8BE2\u95EE\u6EE1\u8DB3\u6761\u4EF6\u7684\u6700\u5DE6\u7AEF\u70B9</p><h2 id="_5-\u626B\u63CF\u7EBF" tabindex="-1">5. \u626B\u63CF\u7EBF <a class="header-anchor" href="#_5-\u626B\u63CF\u7EBF" aria-hidden="true">#</a></h2><p>\u8FD9\u7C7B\u9898\u76EE\u9700\u8981\u5C06\u4E00\u4E9B\u64CD\u4F5C\u6392\u5E8F,\u7136\u540E\u4ECE\u5DE6\u5230\u53F3\u7528\u4E00\u6839\u626B\u63CF\u7EBF\u626B\u8FC7\u53BB\u6700\u5178\u578B\u7684\u5C31\u662F\u77E9\u5F62\u9762\u79EF\u5E76,\u5468\u957F\u5E76\u7B49\u9898</p><p>HDU 1542 Atlantis update:\u533A\u95F4\u589E\u51CF query:\u76F4\u63A5\u53D6\u6839\u8282\u70B9\u7684\u503C HDU 1828 Picture update:\u533A\u95F4\u589E\u51CF query:\u76F4\u63A5\u53D6\u6839\u8282\u70B9\u7684\u503C</p><h2 id="_6-\u8BA1\u6570\u95EE\u9898" tabindex="-1">6. \u8BA1\u6570\u95EE\u9898 <a class="header-anchor" href="#_6-\u8BA1\u6570\u95EE\u9898" aria-hidden="true">#</a></h2><p>\u5728 LeetCode \u4E2D\u8FD8\u6709\u4E00\u7C7B\u95EE\u9898\u6D89\u53CA\u5230\u8BA1\u6570\u7684\u3002 315. Count of Smaller Numbers After Self\uFF0C 327. Count of Range Sum\uFF0C 493. Reverse Pairs \u8FD9\u7C7B\u95EE\u9898\u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u5957\u8DEF\u89E3\u51B3\u3002\u7EBF\u6BB5\u6811\u7684\u6BCF\u4E2A\u8282\u70B9\u5B58\u7684\u662F\u533A\u95F4\u8BA1\u6570\u3002</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// SegmentCountTree define</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SegmentCountTree</span><span style="color:#A6ACCD;"> struct {</span></span>
<span class="line"><span style="color:#A6ACCD;">	data, tree  []int</span></span>
<span class="line"><span style="color:#A6ACCD;">	left, right int</span></span>
<span class="line"><span style="color:#A6ACCD;">	merge       func(i, j int) int</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Init define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">Init</span><span style="color:#A6ACCD;">(nums []int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oper </span><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">(i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j int) int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">merge</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">tree</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make</span><span style="color:#F07178;">([]</span><span style="color:#A6ACCD;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make</span><span style="color:#F07178;">([]</span><span style="color:#A6ACCD;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tree</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u5728 treeIndex \u7684\u4F4D\u7F6E\u521B\u5EFA [left....right] \u533A\u95F4\u7684\u7EBF\u6BB5\u6811</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildSegmentTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">leftChild</span><span style="color:#A6ACCD;">(index int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">rightChild</span><span style="color:#A6ACCD;">(index int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u67E5\u8BE2 [left....right] \u533A\u95F4\u5185\u7684\u503C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Query define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">Query</span><span style="color:#A6ACCD;">(left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryInTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u5728\u4EE5 treeIndex \u4E3A\u6839\u7684\u7EBF\u6BB5\u6811\u4E2D [left...right] \u7684\u8303\u56F4\u91CC\uFF0C\u641C\u7D22\u533A\u95F4 [queryLeft...queryRight] \u7684\u503C\uFF0C\u503C\u662F\u8BA1\u6570\u503C</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">queryInTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> queryRight int) int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">queryInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queryRight</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u66F4\u65B0\u8BA1\u6570</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// UpdateCount define</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">UpdateCount</span><span style="color:#A6ACCD;">(val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateCountInTree</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">len</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u4EE5 treeIndex \u4E3A\u6839\uFF0C\u66F4\u65B0 [left...right] \u533A\u95F4\u5185\u7684\u8BA1\u6570</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;"> (st </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SegmentCountTree) </span><span style="color:#82AAFF;">updateCountInTree</span><span style="color:#A6ACCD;">(treeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val int) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tree</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rightTreeIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">leftChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rightChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">treeIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateCountInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateCountInTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">midTreeIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,87);function x(m,I,T,_,q,z){const s=e("font");return t(),a("div",null,[l(s,{style:{"font-size":"36px"}},{default:p(()=>[r("segment tree")]),_:1}),f])}const S=n(h,[["render",x]]);export{b as __pageData,S as default};
