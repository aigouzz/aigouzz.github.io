import{_ as e,c as r,b as n,w as l,a,r as d,o as i,d as s}from"./app.bff3aa87.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6570\u636E\u7ED3\u6784","slug":"\u6570\u636E\u7ED3\u6784","link":"#\u6570\u636E\u7ED3\u6784","children":[]}],"relativePath":"intro/1.md"}'),c={name:"intro/1.md"},b=a('<h2 id="\u6570\u636E\u7ED3\u6784" tabindex="-1">\u6570\u636E\u7ED3\u6784 <a class="header-anchor" href="#\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a></h2><p>\u4EE5\u4E0B\u662F\u7B14\u8005\u6574\u7406\u7684\u6570\u636E\u7ED3\u6784\u76F8\u5173\u7684\u77E5\u8BC6\u3002\u5E0C\u671B\u80FD\u628A\u5E38\u89C1\u7684\u6570\u636E\u7ED3\u6784\u90FD\u679A\u4E3E\u7A77\u5C3D\u3002\u5982\u6709\u9057\u6F0F\uFF0C\u6B22\u8FCE\u5927\u5BB6\u8D50\u6559\uFF0C\u63D0 PR\u3002\u76F8\u5173\u9898\u76EE\u8FD8\u5728\u6162\u6162\u6574\u7406\u4E2D\uFF0C\u8BB2\u89E3\u7684\u6587\u7AE0\u8FD8\u5728\u521B\u4F5C\u4E2D\u3002</p><p>\u5237\u9898\u53EA\u662F\u63D0\u5347\u7B97\u6CD5\u80FD\u529B\u7684\u624B\u6BB5\uFF0C\u6700\u7EC8\u76EE\u7684\u5E94\u8BE5\u662F\u63D0\u5347\u81EA\u6211\u7684\u601D\u7EF4\u80FD\u529B\uFF0C\u77E5\u8BC6\u9700\u8981\u51DD\u7ED3\u6210\u5757\uFF0C\u90A3\u4E48\u5C31\u628A\u8FD9\u4E9B\u603B\u7ED3\u5728\u7B2C\u4E00\u7AE0\u8FD9\u4E24\u8282\u4E2D\uFF0C\u8BA9\u5B83\u5F97\u5230\u5347\u534E\u5427~\u5E0C\u671B\u8BFB\u8005\u5728\u5237\u5B8C\u9898\u4E4B\u540E\u518D\u56DE\u8FC7\u5934\u6765\u770B\u8FD9\u4E2A\u8868\u683C\uFF0C\u80FD\u5F88\u6E05\u6670\u7684\u68B3\u7406\u81EA\u5DF1\u7684\u77E5\u8BC6\u4F53\u7CFB\uFF0C\u67E5\u7F3A\u8865\u6F0F\uFF0C\u5C3D\u65E9\u5B8C\u5584\u3002</p><table><thead><tr><th style="text-align:center;">\u6570\u636E\u7ED3\u6784</th><th style="text-align:left;">\u53D8\u79CD</th><th style="text-align:center;">\u76F8\u5173\u9898\u76EE</th><th style="text-align:center;">\u8BB2\u89E3\u6587\u7AE0</th></tr></thead><tbody><tr><td style="text-align:center;">\u987A\u5E8F\u7EBF\u6027\u8868\uFF1A\u5411\u91CF<br>Vector</td><td style="text-align:left;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u5355\u94FE\u8868<br>Singly Linked List</td><td style="text-align:left;">1. \u53CC\u5411\u94FE\u8868 Double Linked Lists<br>2. \u9759\u6001\u94FE\u8868 Static List<br>3. \u5BF9\u79F0\u77E9\u9635 Symmetric Matrix<br>4. \u7A00\u758F\u77E9\u9635 Sparse Matrix</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u54C8\u5E0C\u8868<br>Hash Table</td><td style="text-align:left;">1. \u6563\u5217\u51FD\u6570 Hash Function<br>2. \u89E3\u51B3\u78B0\u649E/\u586B\u5145\u56E0\u5B50 CollisionResolution<br></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u6808\u548C\u961F\u5217<br>Stack &amp; Queue</td><td style="text-align:left;">1. \u5E7F\u4E49\u8868 Generalized List/GList<br>2. \u53CC\u7AEF\u961F\u5217 Deque</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u961F\u5217<br>Queue</td><td style="text-align:left;">1. \u94FE\u8868\u5B9E\u73B0 Linked List Implementation<br>2. \u5FAA\u73AF\u6570\u7EC4\u5B9E\u73B0 ArrayQueue<br>3. \u53CC\u7AEF\u961F\u5217 Deque<br>4. \u4F18\u5148\u961F\u5217 Priority Queue<br>5. \u5FAA\u73AF\u961F\u5217 Circular Queue</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u5B57\u7B26\u4E32<br>String</td><td style="text-align:left;">1. KMP \u7B97\u6CD5<br>2. \u6709\u9650\u72B6\u6001\u81EA\u52A8\u673A<br>3. \u6A21\u5F0F\u5339\u914D\u6709\u9650\u72B6\u6001\u81EA\u52A8\u673A<br>4. BM \u6A21\u5F0F\u5339\u914D\u7B97\u6CD5<br>5. BM-KMP \u7B97\u6CD5<br>6. BF \u7B97\u6CD5</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u6811<br>Tree</td><td style="text-align:left;">1. \u4E8C\u53C9\u6811 Binary Tree<br>2. \u5E76\u67E5\u96C6 Union-Find<br>3. Huffman \u6811</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u6570\u7EC4\u5B9E\u73B0\u7684\u5806<br>Heap</td><td style="text-align:left;">1. \u6781\u5927\u5806\u548C\u6781\u5C0F\u5806 Max Heap and Min Heap<br>2. \u6781\u5927\u6781\u5C0F\u5806<br>3. \u53CC\u7AEF\u5806 Deap<br>4. d \u53C9\u5806</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u6811\u5B9E\u73B0\u7684\u5806<br>Heap</td><td style="text-align:left;">1. \u5DE6\u5806 Leftist Tree/Leftist Heap<br>2. \u6241\u5806<br>3. \u4E8C\u9879\u5F0F\u5806<br>4. \u6590\u6CE2\u90A3\u5951\u5806 Fibonacco Heap<br>5. \u914D\u5BF9\u5806 Pairing Heap</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">\u67E5\u627E<br>Search</td><td style="text-align:left;">1. \u54C8\u5E0C\u8868 Hash<br>2. \u8DF3\u8DC3\u8868 Skip List<br>3. \u6392\u5E8F\u4E8C\u53C9\u6811 Binary Sort Tree<br>4. AVL \u6811<br>5. B \u6811 / B+ \u6811 / B* \u6811<br>6. AA \u6811<br>7. \u7EA2\u9ED1\u6811 Red Black Tree<br>8. \u6392\u5E8F\u4E8C\u53C9\u5806 Binary Heap<br>9. Splay \u6811<br>10. \u53CC\u94FE\u6811 Double Chained Tree<br>11. Trie \u6811<br>12. R \u6811</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table>',4);function y(x,o,g,p,_,f){const t=d("font");return i(),r("div",null,[n(t,{style:{"font-size":"36px"}},{default:l(()=>[s("\u6570\u636E\u7ED3\u6784")]),_:1}),b])}const m=e(c,[["render",y]]);export{u as __pageData,m as default};
