(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{278:function(r,n,t){"use strict";t.r(n);var e=t(13),a=Object(e.a)({},(function(){var r=this,n=r._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h3",{attrs:{id:"算法1-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法1-3"}},[r._v("#")]),r._v(" 算法1-3")]),r._v(" "),n("ul",[n("li",[n("p",[r._v("第一题：两数之和")]),r._v(" "),n("ul",[n("li",[r._v("描述\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。")]),r._v(" "),n("li",[r._v("难度\n简单")]),r._v(" "),n("li",[r._v("实例：")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("nums = [2, 7, 11, 155],target = 9\n因为nums[0] + nums[1] = 2 + 7 = 9\nreturn [0, 1]\n")])])]),n("ul",[n("li",[r._v("解决方法"),n("br"),r._v("\n暴力破解法：")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function sumPlus(arr, target) {\n  for(let i=0;i < arr.length;i ++) {\n      let res = target - arr[i];\n      for(let j = i + 1;j < arr.length;j ++) {\n          if(arr[j] == res) {\n              return [i, j];\n          }\n      }\n  }\n  return [];\n}\n")])])]),n("p",[r._v("取巧法：")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function sumPlus(arr, target) {\n  for(let i=0;i < arr.length;i ++) {\n      let res = target - arr[i];\n      if(arr.includes(res)) {\n          return [i, arr.indexOf(res)];\n      }\n  };\n  return [];\n}\n")])])])]),r._v(" "),n("li",[n("p",[r._v("第二题：回文数")]),r._v(" "),n("ul",[n("li",[r._v("描述"),n("br"),r._v("\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数")]),r._v(" "),n("li",[r._v("实例"),n("br"),r._v("\n12321  true\n123431  false\n-12321  false")]),r._v(" "),n("li",[r._v("解决方法")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function isPalintrome(num) {\n  let arr = num.toString().split('');\n  let arrTo = num.toString().split('').reverse();\n  let res = arr.every((item, index) => {\n      return item == arrTo[index];\n  });\n  return res;\n}\n")])])])]),r._v(" "),n("li",[n("p",[r._v("无重复字符的最长子串")]),r._v(" "),n("ul",[n("li",[r._v("描述"),n("br"),r._v("\n给定一个字符串，找出其中不含有重复字符的 最长子串 和 长度")]),r._v(" "),n("li",[r._v("实例\n"),n("blockquote",[n("p",[r._v('输入: "abcabcbb"'),n("br"),r._v("\n输出: 3"),n("br"),r._v('\n解释: 无重复字符的最长子串是 "abc"，其长度为 3。'),n("br"),r._v('\n输入: "pwwkew"'),n("br"),r._v("\n输出: 3"),n("br"),r._v('\n解释: 无重复字符的最长子串是 "wke"，其长度为 3。\n请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串')])]),r._v(" "),n("ul",[n("li",[r._v("解决方法")])]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function findMaxSon(str) {\n    let cached = [];\n}\n")])])])])])])])])}),[],!1,null,null,null);n.default=a.exports}}]);