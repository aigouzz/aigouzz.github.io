{"version":3,"file":"static/js/848.ea92cab9.chunk.js","mappings":"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","sources":["hooks/change-music.js","pages/search/child-pages/single/style.js","pages/search/child-pages/single/c-cpns/single-song-item/style.js","pages/search/child-pages/single/c-cpns/single-song-item/index.js","pages/search/child-pages/single/index.js","pages/search/store/actionCreator.js","../node_modules/.pnpm/registry.npmmirror.com+@ant-design+icons-svg@4.2.1/node_modules/@ant-design/icons-svg/es/asn/PlayCircleOutlined.js","../node_modules/.pnpm/registry.npmmirror.com+@ant-design+icons@4.7.0_biqbaboplfbrettd7655fr4n2y/node_modules/@ant-design/icons/es/icons/PlayCircleOutlined.js"],"sourcesContent":["import { useDispatch } from \"react-redux\"\nimport { getAddSongDetailAction } from '@/pages/player/store/actionCreator'\nimport { getFindIdIndex } from '@/utils/math-utils'\n\n/**\n * 调用该函数:传递播放列表和message组件,返回一个函数供于合成事件调用\n * @param {Array} playlist redux保存中播放列表\n * @param {Message} message Ant design消息组件:用于弹窗\n */\nexport function useAddPlaylist(playlist, message) {\n  const dispatch = useDispatch()\n  return (e, id) => {\n    // 阻止超链接跳转\n    e.preventDefault && e.preventDefault()\n    // 获取歌曲详情,添加到播放列表\n    dispatch(getAddSongDetailAction(id))\n    // 提示添加成功或失败\n    const index = getFindIdIndex(playlist, id)\n    switch (index) {\n      case -1:\n        message.success({ content: '添加成功' })\n        break\n      default:\n        message.success({ content: '不能添加重复的歌曲' })\n    }\n  }\n}","const { default: styled } = require(\"styled-components\");\n\nexport const SingleSongWrapper = styled.div`\n  margin-top: 18px;\n\n`","import styled from 'styled-components'\n\nexport const SingleSongItemWrapper = styled.div`\n  display: flex;\n  padding: 10px 10px 8px 18px;\n  border: 1px solid #fff;\n  &:hover {\n    border: 1px solid #e1e1e1;\n    background: #f2f2f2;\n  }\n\n  .song-name {\n    width: 370px;\n    display: flex;\n    justify-items: center;\n    .anticon-play-circle {\n      color: #b2b2b2;\n      font-size: 18px;\n\n      &:hover {\n        color: #666666;\n      }\n    }\n    & > em {\n      margin-left: 5px;\n      color: #0c73c2;\n      cursor: pointer;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n\n    .btn {\n      width: 17px;\n      height: 17px;\n      margin-left: 8px;\n      cursor: pointer;\n      &.addto {\n        position: relative;\n        top: 2px;\n        background-position: 0 -700px;\n      }\n    }\n  }\n\n  .singer {\n    width: 144px;\n    margin-left: 125px;\n  }\n\n  .album {\n    width: 156px;\n    margin-right: 12px;\n  } \n  \n  &:nth-child(even) {\n    background: #f7f7f7;\n    border-color: #f7f7f7;\n    &:hover {\n      border: 1px solid #e1e1e1;\n      background: #f2f2f2;\n    }\n  }\n  \n`\n","import React, { memo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nimport propTypes from 'prop-types'\nimport { getSongDetailAction } from '@/pages/player/store'\nimport { useAddPlaylist } from '@/hooks/change-music'\n\nimport { PlayCircleOutlined } from '@ant-design/icons'\nimport { SingleSongItemWrapper } from './style'\nimport { message } from 'antd'\n\nfunction SingleSongItem(props) {\n  // props/state\n  const { songId, songName, singer, album, duration } = props\n\n  // redux hook\n  const dispatch = useDispatch()\n  const { playlist } = useSelector((state) => ({\n    playlist: state.getIn(['player', 'playList']),\n  }))\n\n  // 播放音乐\n  const playMusic = () => {\n    dispatch(getSongDetailAction(songId))\n    document.getElementById('audio').autoplay = true\n  }\n\n  const addPlaylist = useAddPlaylist(playlist, message)\n\n  return (\n    <SingleSongItemWrapper>\n      <div className=\"song-name\">\n        <PlayCircleOutlined onClick={() => playMusic()} />\n        <em onClick={() => playMusic()}>{songName}</em>\n        <button\n          href=\"/discover/recommend\"\n          className=\"sprite_icon2 btn addto\"\n          onClick={(e) => addPlaylist(e, songId)}\n        ></button>\n      </div>\n      <NavLink\n        to=\"/discover/song\"\n        className=\"singer\"\n        onClick={() => playMusic()}\n      >\n        {singer}\n      </NavLink>\n      <div className=\"text-nowrap album\">《{album}》</div>\n      <div className=\"text-nowrap duration\">{duration}</div>\n    </SingleSongItemWrapper>\n  )\n}\n\nSingleSongItem.propTypes = {\n  songId: propTypes.number.isRequired,\n  songName: propTypes.string.isRequired,\n  singer: propTypes.string.isRequired,\n  album: propTypes.string.isRequired,\n  duration: propTypes.string.isRequired,\n}\n\nexport default memo(SingleSongItem)\n","import React, { memo, useEffect } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\n\nimport qs from 'query-string'\nimport { getSearchSongListAction } from '../../store/actionCreator'\nimport { formatMinuteSecond } from '@/utils/format-utils'\n\nimport { SingleSongWrapper } from './style'\nimport SingleSongItem from './c-cpns/single-song-item'\n\nexport default memo(function JMSingle(props) {\n  // props/state\n  const { song, type } = qs.parse(props.location.search)\n\n  // redux hook\n  const dispatch = useDispatch()\n  const { singleSongList } = useSelector(\n    (state) => ({\n      singleSongList: state.getIn(['search', 'singleSongList']),\n    }),\n    shallowEqual\n  )\n\n  // other hook\n  // (根据歌曲名字发送网络请求)\n  useEffect(() => {\n    // 传递歌曲发送网络请求\n    if (song) dispatch(getSearchSongListAction(song, 20, type))\n  }, [dispatch, song, type, props])\n\n  return (\n    <SingleSongWrapper>\n      {singleSongList && singleSongList.map((item) => {\n        return (\n          <SingleSongItem\n            key={item.id}\n            songId={item.id}\n            songName={item.name}\n            singer={item.artists[0].name}\n            album={item.album.name}\n            duration={formatMinuteSecond(item.duration)}\n          />\n        )\n      })}\n    </SingleSongWrapper>\n  )\n})\n","import { getSearchSongData } from '@/service/theme-header.js'\nimport * as actionTypes from './actionType'\n\n// 改变歌曲列表Action\nconst changeSongListAction = (songs) => ({\n  type: actionTypes.CHANGE_SEARCH_SONG_LIST,\n  songs\n})\n\n// 改变歌手列表\nconst changeSingerListAction = (singerList) => ({\n  type: actionTypes.CHANGE_SINGER_LIST,\n  singerList: singerList\n})\n\n// 搜索歌曲列表network\nexport const getSearchSongListAction = (songName, limit, type = 1) => {\n  return (dispatch) => {\n    getSearchSongData(songName, limit, type).then((res) => {\n      const songs = res && res.result.songs\n      dispatch(changeSongListAction(songs))\n    })\n  } \n}\n\n// 搜索歌手列表network\nexport const getSearchSingerListAction = (song, limit, type) => {\n  return (dispatch) => {\n    getSearchSongData(song, 20, type).then((res) => {\n      const singerList = res.result && res.result.artists\n      console.log(singerList)\n      dispatch(changeSingerListAction(singerList))\n    })\n  }\n}","// This icon file is generated automatically.\nvar PlayCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M719.4 499.1l-296.1-215A15.9 15.9 0 00398 297v430c0 13.1 14.8 20.5 25.3 12.9l296.1-215a15.9 15.9 0 000-25.8zm-257.6 134V390.9L628.5 512 461.8 633.1z\" } }] }, \"name\": \"play-circle\", \"theme\": \"outlined\" };\nexport default PlayCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlayCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlayCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlayCircleOutlined = function PlayCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlayCircleOutlinedSvg\n  }));\n};\n\nPlayCircleOutlined.displayName = 'PlayCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlayCircleOutlined);"],"names":["useAddPlaylist","playlist","message","dispatch","useDispatch","e","id","preventDefault","getAddSongDetailAction","getFindIdIndex","success","content","SingleSongWrapper","require","default","div","SingleSongItemWrapper","styled","SingleSongItem","props","songId","songName","singer","album","duration","useSelector","state","getIn","playMusic","getSongDetailAction","document","getElementById","autoplay","addPlaylist","className","PlayCircleOutlined","onClick","href","to","memo","qs","location","search","song","type","singleSongList","shallowEqual","useEffect","getSearchSongListAction","map","item","name","artists","formatMinuteSecond","changeSongListAction","songs","actionTypes","limit","getSearchSongData","then","res","result","getSearchSingerListAction","singerList","console","log","changeSingerListAction","ref","React","AntdIcon","_objectSpread","icon","PlayCircleOutlinedSvg","displayName"],"sourceRoot":""}